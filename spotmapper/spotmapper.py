import numpy as np
from scipy.spatial import distance_matrix
from scipy.optimize import minimize
import xml.etree.ElementTree as ET


class GrainMap:
    """
    Any raster representation of grains.
    """

    def __init__(self, img, extent=[]):
        """
        Parameters:
        -----------
        img : PIL.Image
            image object of raster

        extent : 1d array like
            if known, extent of the raster in the coordinate system of the laser
        """
        self.img = img
        self.extent = extent
        return

    def fit_spots(self, spots):
        """
        Fits spot coordinates to grain centroids detected in raster and resets extents.
        Assumes affine coordinate transformation.

        Paramters:
        ----------
        spots : 2d nd.array
            x, y coordinates of spots as reported from laser software and output by Iolite
        """
        # compute grain centroids
        self.detect_grains()

        def grains2spots(M):
            """
            cost function for mapping from grain coordinate system to spot coordinate system
            """
            A = M[0:4].reshape(2, 2)
            b = M[4:6].reshape(-1, 1)

            spot_coords = np.matmul(A, self.grains) + b

            # take mimimum of pairwise distances between resulting coordinates and provided spots
            # sum the mimimum distances
            min_dists = np.min(distance_matrix(
                spot_coords, spots))  # what is pdist in python
            cost = np.sum(min_dists)
            return cost

        res = minimize(grains2spots,
                       np.array([1, 0, 0, 1, 0,
                                 0]))  # need to find right optimizer

    def detect_grains(self):
        """
        Detects grains within self.img and saves centroids in numpy image coordinates
        """
        self.grains = grain_centroids


def samplespots(img, sample_name):
    """user clicks spots on image, returns spot coordinates

    :param img: _description_
    :type img: _type_
    :param sample_name: _description_
    :type sample_name: _type_
    """
    return


def px2um(xmlpath):
    """This function accepts a path to an xml file generated by the mapping tool from
    the xT microscope control program and returns the pixels per micron for each image
    in the xml file.

    Args:
        xmlpath (_type_): _description_
    """
    xml_tree = ET.parse(xmlpath)
    return